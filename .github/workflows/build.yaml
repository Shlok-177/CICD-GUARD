name: Build Multi-Platform Binaries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary_name: cicd-guard-windows.exe
            archive_name: cicd-guard-windows.zip
            
          # Linux AMD64
          - os: ubuntu-latest
            arch: amd64
            goos: linux
            goarch: amd64
            binary_name: cicd-guard-linux-amd64
            archive_name: cicd-guard-linux-amd64.tar.gz
            
          # Linux ARM64
          - os: ubuntu-latest
            arch: arm64
            goos: linux
            goarch: arm64
            binary_name: cicd-guard-linux-arm64
            archive_name: cicd-guard-linux-arm64.tar.gz
            
          # macOS AMD64 (Intel)
          - os: macos-latest
            arch: amd64
            goos: darwin
            goarch: amd64
            binary_name: cicd-guard-darwin-amd64
            archive_name: cicd-guard-darwin-amd64.tar.gz
            
          # macOS ARM64 (Apple Silicon)
          - os: macos-latest
            arch: arm64
            goos: darwin
            goarch: arm64
            binary_name: cicd-guard-darwin-arm64
            archive_name: cicd-guard-darwin-arm64.tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        shell: bash
        run: |
          echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
          go build -ldflags="-s -w" -o ${{ matrix.binary_name }} .
          
          # Make binary executable (for Unix systems)
          if [[ "${{ matrix.goos }}" != "windows" ]]; then
            chmod +x ${{ matrix.binary_name }}
          fi

      - name: Create archive
        shell: bash
        run: |
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            # Create ZIP for Windows
            7z a ${{ matrix.archive_name }} ${{ matrix.binary_name }}
          else
            # Create tar.gz for Unix systems
            tar -czf ${{ matrix.archive_name }} ${{ matrix.binary_name }}
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: ${{ matrix.archive_name }}
          retention-days: 15